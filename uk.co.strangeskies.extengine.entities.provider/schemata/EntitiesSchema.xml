<?xml version="1.0" ?>
<schema
	xmlns="http://modabi.strangeskies.co.uk/2014-01-01/"
	name="EntitiesSchema">

	<imports>
		uk.co.strangeskies.reflection.TypeToken.Infer,
		uk.co.strangeskies.extengine.entity.behaviour.BehaviourComponent,
		uk.co.strangeskies.extengine.entity.behaviour.BehaviourComponentConfigurator,
		uk.co.strangeskies.extengine.entity.behaviour.BehaviourProcess,
		uk.co.strangeskies.extengine.entity.assembly.Pattern,
		uk.co.strangeskies.extengine.entity.assembly.PatternFactory,
		uk.co.strangeskies.extengine.entity.state.StateComponent,
		uk.co.strangeskies.extengine.entity.state.StateComponentConfigurator,
		uk.co.strangeskies.extengine.entity.assembly.StateInitialiser,
		java.util.Set,
		uk.co.strangeskies.extengine.entity.assembly.Ensemble,
		uk.co.strangeskies.extengine.entity.assembly.Catalogue,
		uk.co.strangeskies.utilities.factory.Factory,
		uk.co.strangeskies.extengine.entity.scheduling.Scheduler,
		uk.co.strangeskies.extengine.entity.scheduling.TerminatingScheduler,
		uk.co.strangeskies.extengine.entity.scheduling.schedulers.CyclicScheduler,
		uk.co.strangeskies.extengine.entity.scheduling.schedulers.PeriodicScheduler,
		uk.co.strangeskies.extengine.entity.scheduling.schedulers.LinearScheduler,
		uk.co.strangeskies.extengine.entity.scheduling.schedulers.CriticalPathScheduler
	</imports>

	<dependencies>
		BaseSchema,
		ScriptingSchema
	</dependencies>

	<types>
		<type
			name="stateReference"
			baseType="reference"
			dataType="StateComponent{?\, ?}">
			<data
				name="targetModel"
				value="stateComponent" />
			<data
				name="targetId"
				value="name" />
		</type>

		<type
			name="behaviourReference"
			baseType="reference"
			dataType="BehaviourComponent">
			<data
				name="targetModel"
				value="behaviourComponent" />
			<data
				name="targetId"
				value="name" />
		</type>

		<type
			name="patternReference"
			baseType="reference"
			dataType="Pattern">
			<data
				name="targetModel"
				value="pattern" />
			<data
				name="targetId"
				value="name" />
		</type>
	</types>

	<models>
		<model
			name="stateDependencies"
			dataType="@Infer Set{?}">

			<simple
				name="dependency"
				type="stateReference"
				inMethod="add"
				outMethod="this"
				outMethodIterable="true"
				occurrences="1.." />
		</model>

		<model
			name="stateComponent"
			dataType="StateComponent{?\, ?}"
			bindingType="StateComponentConfigurator{?\, ?}">

			<simple
				name="name"
				outMethod="getName"
				type="string" />
			<simple
				name="description"
				outMethod="getDescription"
				type="string" />

			<complex
				name="readDependencies"
				baseModel="stateDependencies"
				outMethod="getReadDependencies"
				inMethod="readDependencies"
				occurrences="0..1" />

			<complex
				name="writeDependencies"
				baseModel="stateDependencies"
				outMethod="getWriteDependencies"
				inMethod="writeDependencies"
				occurrences="0..1" />

			<!-- complex name="data"> <simple type="type" /> <complex name="factory" 
				dataType="Factory" baseModel="userDefined" /> </complex -->
		</model>

		<model
			name="behaviourDependencies"
			dataType="@Infer Set{?}">
			<simple
				name="dependency"
				type="behaviourReference"
				inMethod="add"
				outMethod="this"
				outMethodIterable="true"
				occurrences="1.." />
		</model>

		<model
			name="behaviourComponent"
			dataType="BehaviourComponent"
			bindingType="BehaviourComponentConfigurator">
			<simple
				name="name"
				type="string" />
			<simple
				name="description"
				type="string" />

			<complex
				name="readDependencies"
				baseModel="stateDependencies"
				occurrences="0..1" />
			<complex
				name="writeDependencies"
				baseModel="stateDependencies"
				occurrences="0..1" />

			<complex
				name="process"
				baseModel="scriptObject"
				dataType="BehaviourProcess" />
		</model>

		<model
			name="pattern"
			dataType="Pattern"
			bindingType="PatternFactory">

			<property
				name="name"
				type="string"
				inMethod="create"
				inMethodChained="true" />

			<complex
				name="composition"
				dataType="@Infer Set{?}"
				bindingStrategy="TARGET_ADAPTOR"
				inMethod="null">

				<inputSequence
					name="getComposition"
					inMethodChained="true" />

				<simple
					name="component"
					type="patternReference"
					inMethod="add"
					outMethod="this"
					outMethodIterable="true"
					occurrences="1.." />
			</complex>

			<complex
				name="children"
				dataType="@Infer Set{?}"
				bindingStrategy="TARGET_ADAPTOR"
				inMethod="null">

				<inputSequence
					name="getChildren"
					inMethodChained="true" />

				<simple
					name="component"
					type="patternReference"
					inMethod="add"
					outMethod="this"
					outMethodIterable="true"
					occurrences="1.." />
			</complex>

			<complex
				name="variables"
				dataType="@Infer Set{?}"
				bindingStrategy="TARGET_ADAPTOR"
				inMethod="null">

				<inputSequence
					name="getVariables"
					inMethodChained="true" />
			</complex>

			<simple
				name="behaviour"
				dataType="@Infer Set{?}"
				bindingStrategy="TARGET_ADAPTOR"
				inMethod="null"
				outMethod="getBehaviours">

				<inputSequence
					name="getBehaviours"
					inMethodChained="true" />

				<data
					name="component"
					type="behaviourReference"
					inMethod="add"
					isIterableOut="true"
					outMethod="this"
					outMethodIterable="true"
					occurrences="1.." />
			</simple>

			<complex
				name="state"
				dataType="Pattern"
				bindingStrategy="TARGET_ADAPTOR"
				inMethod="null"
				outMethod="this">

				<complex
					name="component"
					dataType="StateComponent{?\, ?}"
					inMethod="null"
					bindingStrategy="TARGET_ADAPTOR"
					outMethod="getStates"
					outMethodIterable="true"
					occurrences="1..">

					<property
						name="name"
						type="stateReference"
						inMethod="getInitialisers"
						outMethod="this"
						inMethodChained="true" />

					<!-- TODO initialiser -->
				</complex>
			</complex>
		</model>

		<model
			name="patterns"
			dataType="@Infer Set{?}">
			<simple
				name="pattern"
				type="patternReference"
				inMethod="add"
				outMethod="this"
				occurrences="1.." />
		</model>

		<!-- Schedulers -->
		<model
			name="scheduler"
			abstract="true"
			extensible="true"
			dataType="Scheduler" />

		<model
			name="terminatingScheduler"
			abstract="true"
			dataType="TerminatingScheduler" />

		<model
			name="cyclic"
			baseModel="scheduler"
			dataType="CyclicScheduler"
			bindingStrategy="CONSTRUCTOR">
			<complex
				name="cycle"
				baseModel="terminatingScheduler"
				extensible="true" />
		</model>

		<model
			name="periodic"
			baseModel="cyclic"
			dataType="PeriodicScheduler" />

		<model
			name="linearScheduler"
			abstract="true"
			baseModel="terminatingScheduler"
			dataType="LinearScheduler" />

		<model
			name="criticalPathScheduler"
			abstract="true"
			baseModel="terminatingScheduler"
			dataType="CriticalPathScheduler" />

		<!-- Catalogue -->
		<model
			name="catalogue"
			dataType="Catalogue">

			<property
				name="name"
				type="string" />

			<property
				name="package"
				type="package" />

		</model>

		<!-- Arrangement -->
		<model
			name="ensemble"
			dataType="Ensemble">

			<complex
				name="dependencies"
				occurrences="0..1"
				dataType="@Infer Set{?}">

				<simple
					name="dependency"
					type="import"
					occurrences="0.."
					outMethod="this"
					dataType="Ensemble">

					<data name="import">
						<data
							name="targetModel"
							value="patterns" />
						<data
							name="targetId"
							value="qualifiedName" />
					</data>
					<data
						name="patterns"
						type="include"
						outMethod="this"
						outMethodIterable="true">
						<data
							name="targetModel"
							value="pattern" />
					</data>
				</simple>
			</complex>

			<complex name="schedulers">
				<complex
					baseModel="scheduler"
					abstract="true"
					occurrences="1.." />
			</complex>

			<complex name="globalBehaviours">
				<simple
					name="behaviour"
					type="behaviourReference"
					inMethod="add"
					isIterableOut="true"
					outMethod="this"
					occurrences="1.." />
			</complex>

			<complex baseModel="patterns" />

			<complex
				name="root"
				optional="true"
				baseModel="pattern" />
		</model>
	</models>

	<patterns>
		<pattern name="poop">
			<behaviour>
				<component name="runAround" />
				<component name="sleepWalk" />
				<component name="waddle">

					function process(context) {
					// summat
					}

				</component>
				<component name="move">

					function process(c) {
					for (e in
					c.getEntitiesWith(states.position, states.velocity) {
					pos =
					c.getData(e, states.position);
					vel = c.getReadOnlyData(e,
					states.velocity);
					pos.add(vel);
					}
					}

				</component>
			</behaviour>

			<state>
				<component id="position">
					<vector2>2, 3</vector2>
				</component>

				<component id="velocity">
					<scriptObject>

						function initialise(data, context) {
						data.setValue(10, 10);
						}

					</scriptObject>
				</component>

				<component
					id="size"
					ref="position" />
			</state>
		</pattern>
	</patterns>
</schema>
